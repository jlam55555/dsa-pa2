Ballpark estimates for times of sorts
def look into timsort for first one
radix sort for last one
??? for second one (merge sort?)

baseline
provided_sort (list::sort)
val1: 0.35091
val2: 0.98567
val3: 0.847318
val4: 1.14864
total: 3.332538

sort1 (selection)
val1: 0.225734
diff: -0.125176
total: 3.457714

sort2 (selection, more advanced)
val1: 0.171188
diff: -0.1797
total: 3.152816

sort3 (array)
val3: 0.067162
diff: -0.780156
total: 2.552382

sort4 (radix sort)
val4: 0.385919
diff: -0.762721
total: 2.569817

sort 5 (insertion sort)
val1: 0.104573
diff: -0.246337
total: 3.086201

sort 6 (merge sort)
val2: 0.83491
diff: -0.154179
total: 3.178359

sort 7 (radix sort + insertion sort)
val2: 0.670076

fastest sorts
val1: sort 5: 0.104573
val2: sort 6: 0.670076
val3: sort 3: 0.067162
val4: sort 4: 0.385919
best: 1.22773 
diff: -2.104808
